import React from 'react';
import './Step.css';

const Step = (props) => {

  let inputStep

  return (   
        
          <input ref={(data)=> {inputStep = data}} onChange={() => {props.inputUpdateStepMethod(inputStep.value)}} /* onChange={()=> {console.log()}} */ type="number" min="1"/>
        );

  }

export default Step;

    
    /*  atrybut ref tworzyu dosÅ‚ownie referencjÄ™ do elementu do ktÃ³rego jest wstawiany. Inaczej mÃ³wiÄ…c w chwili gdy piszesz
<input ref={(data) => { this._inputStep = data} } type="number" /> 
 "data" oznacza dosÅ‚ownie "input ze wszystkimi jego wÅ‚asciwoÅ›ciami" -> czyli przypisujÄ…c data (nasz input) do zmiennej _inputStep jestes w stanie odwoÅ‚ac sie i uzyÄ‡ gdzies np wÅ‚aÅ›ciowosci "value" inputa, ktÃ³rej wÅ‚asnie w tym zadaniu potrzebujesz ğŸ˜‰
oczywiÅ›cie poprzez zmiennÄ… _inpuStep czyli ---> this._inputStep.value
    
    */


/*    
inne rozwiÄ…zanie

const inputRef = useRef();
 
    return (   
        
      <input ref={inputRef} onChange={() => {props.inputUpdateStepMethod(Number(inputRef.current.value))}}  type="number" min="1"/>
    
    ); */